<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- <link rel="stylesheet" href="styles.css"> -->
  <title>Tic Tac Toe</title>
  <style>
    body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    /* justify-content: center; */
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #4f4f4f;
  }


  header {
    background-color: #333;
    color: #fff;
    width: 100%;
    padding: 10px 0;
    text-align: center;
  }

  .tic-tac-toe {
    margin-top: 20px;
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 10px;
    background-color: #2A324B;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1);
    box-shadow: 0 0 30px rgba(0, 0, 0, 1);
  }

  .tile {
    width: 100px;
    height: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 36px;
    background-color: #767B91;
    color: #C7CCDB;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
  }

  .reset-button {
    margin-top: 20px;
    padding: 10px 20px;
    background-color: #2A324B;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    color: #C7CCDB;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
    box-shadow: 0 0 30px rgba(0, 0, 0, 1);
  }

  .reset-button:hover {
    background-color: #C7CCDB;
    color: #2A324B;
  }


  .button{
    background-color: #2A324B;
    color: #767B91;
  }

  .tile:hover {
    background-color: #C7CCDB;
    color: #2A324B;
  }

  .tile:active {
    background-color: #2A324B;
    color: #C7CCDB;
  }

  .title {
    font-size: 50px;
    margin: 10px;
    color: #2A324B;
    border-radius: 10px;
    padding: 10px;
    margin-top: 175px;
    background-color: aliceblue;
    box-shadow: 0 0 30px rgba(0, 0, 0, 1);
  }

  .winning-line {
    color: red;
  }

  nav {
    display: flex;
    justify-content: center;
    background-color: #333;
    padding: 10px 0;
    width: 100%;
  }

  nav ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  nav ul li {
    display: inline;
    margin-right: 20px;
  }

  nav ul li a {
    text-decoration: none;
    color: #fff;
    font-weight: bold;
  }

  nav ul li a:hover {
    color: #ccc;
  }
  </style>
   <%- include('../partials/head'); %>
</head>
<body>
<header>
  <nav>
    <ul>
      <li><a href="/">Home</a></li>
      <li><a href="/about">About</a></li>
      <li><a href="/portfolio">Portfolio</a></li>
      <li><a href="/uniquepage">Unique Page</a></li>
    </ul>
  </nav>
</header>

<div class="title"> Tic Tac Toe</div>
<div class="tic-tac-toe">
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
  <div class="tile"></div>
</div>

<button class="reset-button">Reset Game</button>

<script>
  const tiles = document.querySelectorAll('.tile');
  const resetButton = document.querySelector('.reset-button');
  let currentPlayer = 'X';
  let moves = 0;
  let gameOver = false;

  const winningCombination = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
    [0, 4, 8], [2, 4, 6]            // Diagonals
  ];

  const checkWinner = () => {
    for (const combination of winningCombination) {
      const [a, b, c] = combination;
      if (tiles[a].textContent && tiles[a].textContent === tiles[b].textContent && tiles[a].textContent === tiles[c].textContent) {
        return combination; // Return the winning combination indices
      }
    }
    return null;
  };

  const checkDraw = () => {
    return moves === tiles.length;
  };

  tiles.forEach(tile => {
    tile.addEventListener('click', () => {
      if (!tile.textContent.trim() && !gameOver) {
        tile.textContent = currentPlayer;
        moves++;
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';

        const winnerCombination = checkWinner();
        const isDraw = checkDraw();

        if (winnerCombination) {
          gameOver = true;
          winnerCombination.forEach(index => {
            tiles[index].classList.add('winning-line');
          });

          setTimeout(() => {
            const winner = tiles[winnerCombination[0]].textContent;
            alert(`Player ${winner} wins!`);
          }, 500);
        } else if (isDraw) {
          gameOver = true;
          setTimeout(() => {
            alert(`It's a draw!`);
          }, 500);
        }
      }
    });
  });

  resetButton.addEventListener('click', () => {
    tiles.forEach(tile => {
      tile.textContent = '';
      tile.classList.remove('winning-line');
    });
    currentPlayer = 'X';
    moves = 0;
    gameOver = false;
  });
</script>
</body>
</html>
